// This file automatically generated by template-converter
// DO NOT EDIT!

const char *kern =
"#pragma OPENCL EXTENSION cl_amd_printf : enable\n"
"\n"
"#define N_ANT 256\n"
"\n"
"// A simple unpack kernel\n"
"\n"
"__kernel void unpack(__global uint *input,\n"
"		     __global uint *repacked,\n"
"		     __global uint *accum,\n"
"		     uint nloop)\n"
"{\n"
" uint x = get_global_id(0);\n"
" uint y = get_global_id(1)*nloop;\n"
" uint up[8];\n"
" uint accum_local[8];\n"
" uint addr_x = x*8u;\n"
"\n"
" #pragma unwrap 8\n"
" for (uint j=0; j < 8; j++) accum_local[j]=0;\n"
"\n"
" uint addr_i = mad24(y, 64u, x);\n"
" uint addr_o = mul24(y, 512u);\n"
" uint addr_r = mul24(y, 256u);\n"
"\n"
" for (uint i=0; i < nloop; i++)\n"
" {\n"
"  uint addr_o = addr_i * 8u;\n"
"  uint addr_r = addr_i * 4u;\n"
"\n"
"  #pragma unroll 8\n"
"  for (uint j=0; j<8; j++) up[j] = (input[addr_i] >> (j*4)) & 0xf;\n"
"  #pragma unroll 4\n"
"  for (uint j=0; j<4; j++) repacked[addr_r + j] = mad24(up[2*j],0x10000u,up[2*j+1]);\n"
"  #pragma unroll 8\n"
"  for (uint j=0; j<8; j++) accum_local[j] += up[j];\n"
"\n"
"  addr_i+=64;\n"
" }\n"
" #pragma unroll 8\n"
" for (uint j=0; j<8; j++) atomic_add(&accum[addr_x + j], accum_local[j]);\n"
"}\n"
"\n"
"\n"
"\n"
"__kernel //__attribute__((reqd_work_group_size(16,4,1)))\n"
"         void corr(__global uint *packed,\n"
"//	           __global uint *repacked,\n"
"	           __global int *corr_buf,\n"
"		   __const uint nblk,\n"
"		   __global uint *id_x_map,\n"
"		   __global uint *id_y_map,\n"
"		   __local uint *unpacked)\n"
"{\n"
"  uint lx = get_local_id(0);\n"
"  uint ly = get_local_id(1);\n"
"\n"
"\n"
"  uint z = get_global_id(2) / nblk;\n"
"  uint blkid = get_global_id(2) - z*nblk;\n"
"  uint x = id_x_map[get_global_id(2)-z*nblk];\n"
"  uint y = id_y_map[get_global_id(2)-z*nblk];\n"
"\n"
"  uint q = (lx % 2) * 16;\n"
"  uint addr_x = ((get_local_size(0)*x+lx)*2  + z*N_ANT*256) / 4;\n"
"  uint addr_y = ((y*32 + get_global_id(1)*4) + z*N_ANT*256 + lx*N_ANT)/4;\n"
"\n"
"  uint corr_a[4];\n"
"  uint corr_b[4];\n"
"  uint corr_c[4];\n"
"  uint corr_d[4];\n"
"\n"
"  for (uint j=0; j< 4; j++) corr_a[j]=0;\n"
"  for (uint j=0; j< 4; j++) corr_b[j]=0;\n"
"  for (uint j=0; j< 4; j++) corr_c[j]=0;\n"
"  for (uint j=0; j< 4; j++) corr_d[j]=0;\n"
"\n"
"  for (uint i=0; i<256; i+=get_local_size(0))\n"
"  {\n"
"    uint la=(lx*16 + ly*4);\n"
"    uint pa=packed[mad24(i,64u,addr_y)];\n"
"\n"
"    unpacked[la]   = (((pa >>  0) & 0xf) << 16) + ((pa >>  4) & 0xf);\n"
"    unpacked[la+1] = (((pa >>  8) & 0xf) << 16) + ((pa >> 12) & 0xf);\n"
"    unpacked[la+2] = (((pa >> 16) & 0xf) << 16) + ((pa >> 20) & 0xf);\n"
"    unpacked[la+3] = (((pa >> 24) & 0xf) << 16) + ((pa >> 28) & 0xf);\n"
"\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    for (uint j=0; j<get_local_size(0); j++)\n"
"    {\n"
"      uint temp_ua = unpacked[j*16+ly*4];\n"
"      uint temp_ub = unpacked[j*16+ly*4+1];\n"
"      uint temp_uc = unpacked[j*16+ly*4+2];\n"
"      uint temp_ud = unpacked[j*16+ly*4+3];\n"
"\n"
"      uint temp_par = (packed[addr_x+(i+j)*64] >> (q +  0)) & 0xf;\n"
"      uint temp_pai = (packed[addr_x+(i+j)*64] >> (q +  4)) & 0xf;\n"
"      uint temp_pbr = (packed[addr_x+(i+j)*64] >> (q +  8)) & 0xf;\n"
"      uint temp_pbi = (packed[addr_x+(i+j)*64] >> (q + 12)) & 0xf;\n"
"\n"
"      corr_a[0]=mad24(temp_par, temp_ua, corr_a[0]);\n"
"      corr_a[1]=mad24(temp_pai, temp_ua, corr_a[1]);\n"
"      corr_a[2]=mad24(temp_pbr, temp_ua, corr_a[2]);\n"
"      corr_a[3]=mad24(temp_pbi, temp_ua, corr_a[3]);\n"
"\n"
"      corr_b[0]=mad24(temp_par, temp_ub, corr_b[0]);\n"
"      corr_b[1]=mad24(temp_pai, temp_ub, corr_b[1]);\n"
"      corr_b[2]=mad24(temp_pbr, temp_ub, corr_b[2]);\n"
"      corr_b[3]=mad24(temp_pbi, temp_ub, corr_b[3]);\n"
"\n"
"      corr_c[0]=mad24(temp_par, temp_uc, corr_c[0]);\n"
"      corr_c[1]=mad24(temp_pai, temp_uc, corr_c[1]);\n"
"      corr_c[2]=mad24(temp_pbr, temp_uc, corr_c[2]);\n"
"      corr_c[3]=mad24(temp_pbi, temp_uc, corr_c[3]);\n"
"\n"
"      corr_d[0]=mad24(temp_par, temp_ud, corr_d[0]);\n"
"      corr_d[1]=mad24(temp_pai, temp_ud, corr_d[1]);\n"
"      corr_d[2]=mad24(temp_pbr, temp_ud, corr_d[2]);\n"
"      corr_d[3]=mad24(temp_pbi, temp_ud, corr_d[3]);\n"
"    }\n"
"  }\n"
"\n"
"  uint addr_o = ((blkid * 1024) + (get_global_id(1) * 4 * 32) + (lx * 2)) * 2;\n"
"\n"
"  atomic_add(&corr_buf[addr_o],   (corr_a[0] >> 16) + (corr_a[1] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+1], (corr_a[1] >> 16) - (corr_a[0] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+2], (corr_a[2] >> 16) + (corr_a[3] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+3], (corr_a[3] >> 16) - (corr_a[2] & 0xffff) );\n"
"\n"
"  atomic_add(&corr_buf[addr_o+64], (corr_b[0] >> 16) + (corr_b[1] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+65], (corr_b[1] >> 16) - (corr_b[0] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+66], (corr_b[2] >> 16) + (corr_b[3] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+67], (corr_b[3] >> 16) - (corr_b[2] & 0xffff) );\n"
"\n"
"  atomic_add(&corr_buf[addr_o+128], (corr_c[0] >> 16) + (corr_c[1] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+129], (corr_c[1] >> 16) - (corr_c[0] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+130], (corr_c[2] >> 16) + (corr_c[3] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+131], (corr_c[3] >> 16) - (corr_c[2] & 0xffff) );\n"
"\n"
"  atomic_add(&corr_buf[addr_o+192], (corr_d[0] >> 16) + (corr_d[1] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+193], (corr_d[1] >> 16) - (corr_d[0] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+194], (corr_d[2] >> 16) + (corr_d[3] & 0xffff) );\n"
"  atomic_add(&corr_buf[addr_o+195], (corr_d[3] >> 16) - (corr_d[2] & 0xffff) );\n"
"}\n"
;

