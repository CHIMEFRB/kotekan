// PTX CompilerJob of bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33541 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1362>;
	.reg .b64 	%rd<96>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd13, [_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r80, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r80, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r81, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r81, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r82, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r83, %r82, %r1;
	add.s32 	%r84, %r83, %r4;
	mul.wide.u32 	%rd18, %r84, 4;
	add.s64 	%rd6, %rd5, %rd18;
	mov.u32 	%r85, 1;
	st.global.u32 	[%rd6], %r85;
	shr.u32 	%r5, %r2, 5;
	mul.lo.s32 	%r86, %r5, 192;
	shl.b32 	%r87, %r3, 2;
	bfe.u32 	%r6, %r2, 4, 1;
	shr.u32 	%r7, %r1, 3;
	or.b32  	%r88, %r87, %r7;
	mul.hi.u32 	%r89, %r88, -1431655765;
	shr.u32 	%r90, %r89, 6;
	mul.lo.s32 	%r91, %r90, 96;
	sub.s32 	%r8, %r88, %r91;
	mad.lo.s32 	%r92, %r6, 96, %r86;
	add.s32 	%r93, %r92, %r8;
	mul.wide.u32 	%rd19, %r93, 4;
	add.s64 	%rd20, %rd3, %rd19;
	ld.global.u32 	%r9, [%rd20];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L344
	ld.param.u64 	%rd1, [_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_363213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r352, %r9, -3;
	mul.lo.s32 	%r353, %r5, 49152;
	shl.b32 	%r354, %r1, 1;
	shl.b32 	%r355, %r3, 6;
	or.b32  	%r356, %r354, %r355;
	shl.b32 	%r357, %r1, 4;
	and.b32  	%r358, %r357, 16;
	and.b32  	%r359, %r356, 204;
	or.b32  	%r360, %r358, %r359;
	mul.lo.s32 	%r361, %r6, 24576;
	shr.u32 	%r362, %r3, 2;
	cvt.u16.u32 	%rs4, %r362;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r363, %rs9;
	and.b32  	%r364, %r363, 240;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r365, %r11, 6;
	or.b32  	%r366, %r365, %r364;
	cvt.u16.u32 	%rs10, %r366;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r367, %rs15, 256;
	add.s32 	%r368, %r361, %r353;
	or.b32  	%r369, %r368, %r360;
	or.b32  	%r370, %r369, 1;
	add.s32 	%r371, %r370, %r367;
	mul.wide.u32 	%rd23, %r371, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.v4.u32 	{%r96, %r97, %r112, %r113}, [%rd24+-4];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r372, %rs21, 256;
	add.s32 	%r373, %r370, %r372;
	mul.wide.u32 	%rd25, %r373, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r104, %r105, %r120, %r121}, [%rd26+-4];
	and.b32  	%r374, %r354, 12;
	and.b32  	%r375, %r355, 192;
	or.b32  	%r376, %r375, %r374;
	or.b32  	%r377, %r376, %r358;
	or.b32  	%r378, %r377, %r353;
	add.s32 	%r379, %r361, %r378;
	or.b32  	%r380, %r379, 33;
	add.s32 	%r381, %r380, %r367;
	mul.wide.u32 	%rd27, %r381, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r128, %r129, %r144, %r145}, [%rd28+-4];
	add.s32 	%r382, %r380, %r372;
	mul.wide.u32 	%rd29, %r382, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r136, %r137, %r152, %r153}, [%rd30+-4];
	or.b32  	%r383, %r11, %r364;
	or.b32  	%r384, %r383, 1;
	mul.hi.u32 	%r385, %r384, -1431655765;
	shr.u32 	%r386, %r385, 6;
	mul.lo.s32 	%r387, %r386, 96;
	sub.s32 	%r388, %r384, %r387;
	shl.b32 	%r389, %r388, 8;
	add.s32 	%r390, %r370, %r389;
	mul.wide.u32 	%rd31, %r390, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r160, %r161, %r176, %r177}, [%rd32+-4];
	or.b32  	%r391, %r383, 9;
	mul.hi.u32 	%r392, %r391, -1431655765;
	shr.u32 	%r393, %r392, 6;
	mul.lo.s32 	%r394, %r393, 96;
	sub.s32 	%r395, %r391, %r394;
	shl.b32 	%r396, %r395, 8;
	add.s32 	%r397, %r370, %r396;
	mul.wide.u32 	%rd33, %r397, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r168, %r169, %r184, %r185}, [%rd34+-4];
	add.s32 	%r398, %r380, %r389;
	mul.wide.u32 	%rd35, %r398, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r192, %r193, %r208, %r209}, [%rd36+-4];
	add.s32 	%r399, %r380, %r396;
	mul.wide.u32 	%rd37, %r399, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r200, %r201, %r216, %r217}, [%rd38+-4];
	mov.u32 	%r98, 21520;
	// begin inline asm
	prmt.b32 %r224, %r96, %r97, %r98;
	// end inline asm
	mov.u32 	%r102, 30258;
	// begin inline asm
	prmt.b32 %r225, %r96, %r97, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r104, %r105, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r104, %r105, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r112, %r113, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r112, %r113, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r120, %r121, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r120, %r121, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r128, %r129, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r128, %r129, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r136, %r137, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r136, %r137, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r144, %r145, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r144, %r145, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r152, %r153, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r152, %r153, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r160, %r161, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r160, %r161, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r168, %r169, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r168, %r169, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r176, %r177, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r176, %r177, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r184, %r185, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r184, %r185, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r192, %r193, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r192, %r193, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r200, %r201, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r200, %r201, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r208, %r209, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r208, %r209, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r216, %r217, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r216, %r217, %r102;
	// end inline asm
	mov.u32 	%r226, 25152;
	// begin inline asm
	prmt.b32 %r223, %r224, %r225, %r226;
	// end inline asm
	mov.u32 	%r230, 29521;
	// begin inline asm
	prmt.b32 %r227, %r224, %r225, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r232, %r233, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r232, %r233, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r240, %r241, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r240, %r241, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r248, %r249, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r248, %r249, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r256, %r257, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r256, %r257, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r264, %r265, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r264, %r265, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r272, %r273, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r272, %r273, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r280, %r281, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r280, %r281, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r288, %r289, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r288, %r289, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r296, %r297, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r296, %r297, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r304, %r305, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r304, %r305, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r312, %r313, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r312, %r313, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r320, %r321, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r320, %r321, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r328, %r329, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r328, %r329, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r336, %r337, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r336, %r337, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r344, %r345, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r344, %r345, %r230;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r400, %r255, %r223, %p4;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r223, %r401, %p4;
	selp.b32 	%r403, %r401, %r255, %p4;
	selp.b32 	%r404, %r263, %r231, %p4;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r231, %r405, %p4;
	selp.b32 	%r407, %r405, %r263, %p4;
	selp.b32 	%r408, %r259, %r227, %p4;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r227, %r409, %p4;
	selp.b32 	%r411, %r409, %r259, %p4;
	selp.b32 	%r412, %r267, %r235, %p4;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r235, %r413, %p4;
	selp.b32 	%r415, %r413, %r267, %p4;
	selp.b32 	%r416, %r271, %r239, %p4;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r239, %r417, %p4;
	selp.b32 	%r419, %r417, %r271, %p4;
	selp.b32 	%r420, %r279, %r247, %p4;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r247, %r421, %p4;
	selp.b32 	%r423, %r421, %r279, %p4;
	selp.b32 	%r424, %r275, %r243, %p4;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r243, %r425, %p4;
	selp.b32 	%r427, %r425, %r275, %p4;
	selp.b32 	%r428, %r283, %r251, %p4;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r251, %r429, %p4;
	selp.b32 	%r431, %r429, %r283, %p4;
	selp.b32 	%r432, %r319, %r287, %p4;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r287, %r433, %p4;
	selp.b32 	%r435, %r433, %r319, %p4;
	selp.b32 	%r436, %r327, %r295, %p4;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r295, %r437, %p4;
	selp.b32 	%r439, %r437, %r327, %p4;
	selp.b32 	%r440, %r323, %r291, %p4;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r291, %r441, %p4;
	selp.b32 	%r443, %r441, %r323, %p4;
	selp.b32 	%r444, %r331, %r299, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r299, %r445, %p4;
	selp.b32 	%r447, %r445, %r331, %p4;
	selp.b32 	%r448, %r335, %r303, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r303, %r449, %p4;
	selp.b32 	%r451, %r449, %r335, %p4;
	selp.b32 	%r452, %r343, %r311, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r311, %r453, %p4;
	selp.b32 	%r455, %r453, %r343, %p4;
	selp.b32 	%r456, %r339, %r307, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r307, %r457, %p4;
	selp.b32 	%r459, %r457, %r339, %p4;
	selp.b32 	%r460, %r347, %r315, %p4;
	shfl.sync.bfly.b32	%r461, %r460, 2, 31, -1;
	selp.b32 	%r462, %r315, %r461, %p4;
	selp.b32 	%r463, %r461, %r347, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r464, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r576, %r402, %r465, %p5;
	selp.b32 	%r704, %r465, %r434, %p5;
	selp.b32 	%r466, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r838, %r406, %r467, %p5;
	selp.b32 	%r966, %r467, %r438, %p5;
	selp.b32 	%r468, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r582, %r410, %r469, %p5;
	selp.b32 	%r710, %r469, %r442, %p5;
	selp.b32 	%r470, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r844, %r414, %r471, %p5;
	selp.b32 	%r972, %r471, %r446, %p5;
	selp.b32 	%r472, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r608, %r418, %r473, %p5;
	selp.b32 	%r736, %r473, %r450, %p5;
	selp.b32 	%r474, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r870, %r422, %r475, %p5;
	selp.b32 	%r998, %r475, %r454, %p5;
	selp.b32 	%r476, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r614, %r426, %r477, %p5;
	selp.b32 	%r742, %r477, %r458, %p5;
	selp.b32 	%r478, %r462, %r430, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r876, %r430, %r479, %p5;
	selp.b32 	%r1004, %r479, %r462, %p5;
	selp.b32 	%r480, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r640, %r403, %r481, %p5;
	selp.b32 	%r768, %r481, %r435, %p5;
	selp.b32 	%r482, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r902, %r407, %r483, %p5;
	selp.b32 	%r1030, %r483, %r439, %p5;
	selp.b32 	%r484, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r646, %r411, %r485, %p5;
	selp.b32 	%r774, %r485, %r443, %p5;
	selp.b32 	%r486, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r908, %r415, %r487, %p5;
	selp.b32 	%r1036, %r487, %r447, %p5;
	selp.b32 	%r488, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r672, %r419, %r489, %p5;
	selp.b32 	%r800, %r489, %r451, %p5;
	selp.b32 	%r490, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r934, %r423, %r491, %p5;
	selp.b32 	%r1062, %r491, %r455, %p5;
	selp.b32 	%r492, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r678, %r427, %r493, %p5;
	selp.b32 	%r806, %r493, %r459, %p5;
	selp.b32 	%r494, %r463, %r431, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r940, %r431, %r495, %p5;
	selp.b32 	%r1068, %r495, %r463, %p5;
	shl.b32 	%r496, %r2, 2;
	and.b32  	%r497, %r496, 1920;
	shl.b32 	%r498, %r1, 2;
	and.b32  	%r499, %r498, 28;
	and.b32  	%r500, %r4, 96;
	or.b32  	%r44, %r499, %r500;
	shl.b32 	%r501, %r2, 11;
	and.b32  	%r45, %r501, 30720;
	and.b32  	%r46, %r3, 12;
	shl.b32 	%r502, %r2, 7;
	and.b32  	%r503, %r502, 2048;
	or.b32  	%r504, %r44, %r497;
	or.b32  	%r47, %r504, %r503;
	or.b32  	%r505, %r46, %r45;
	or.b32  	%r48, %r505, 16;
	shl.b32 	%r506, %r1, 3;
	and.b32  	%r507, %r506, 24;
	or.b32  	%r49, %r507, %r500;
	and.b32  	%r50, %r354, 6;
	and.b32  	%r508, %r3, 3;
	mul.lo.s32 	%r509, %r508, 3200;
	mul.hi.u32 	%r510, %r383, -1431655765;
	shr.u32 	%r511, %r510, 6;
	mul.lo.s32 	%r512, %r511, 96;
	sub.s32 	%r513, %r383, %r512;
	or.b32  	%r51, %r513, %r509;
	or.b32  	%r514, %r383, 8;
	mul.hi.u32 	%r515, %r514, -1431655765;
	shr.u32 	%r516, %r515, 6;
	mul.lo.s32 	%r517, %r516, 96;
	sub.s32 	%r518, %r514, %r517;
	or.b32  	%r52, %r518, %r509;
	and.b32  	%r519, %r1, 7;
	or.b32  	%r53, %r8, 3200;
	or.b32  	%r54, %r8, 6400;
	or.b32  	%r55, %r8, 9600;
	shl.b32 	%r56, %r85, %r10;
	min.u32 	%r57, %r352, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r521, %r2, 9;
	shl.b32 	%r522, %r8, 18;
	shl.b32 	%r523, %r1, 5;
	and.b32  	%r524, %r523, 64;
	and.b32  	%r525, %r521, 253952;
	or.b32  	%r58, %r525, %r522;
	mul.lo.s32 	%r526, %r519, 100;
	add.s32 	%r527, %r526, %r8;
	mul.wide.u32 	%rd39, %r527, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd41, %rd40, 16512;
	add.s64 	%rd7, %rd41, %rd39;
	cvt.u64.u32 	%rd42, %r526;
	cvt.u64.u32 	%rd43, %r8;
	add.s64 	%rd44, %rd43, %rd42;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd8, %rd41, %rd45;
	add.s32 	%r528, %r526, 800;
	add.s32 	%r529, %r528, %r8;
	mul.wide.u32 	%rd46, %r529, 4;
	add.s64 	%rd9, %rd41, %rd46;
	cvt.u64.u32 	%rd47, %r528;
	add.s64 	%rd48, %rd43, %rd47;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd10, %rd41, %rd49;
	add.s32 	%r530, %r526, 1600;
	add.s32 	%r531, %r530, %r8;
	mul.wide.u32 	%rd50, %r531, 4;
	add.s64 	%rd11, %rd41, %rd50;
	cvt.u64.u32 	%rd51, %r530;
	add.s64 	%rd52, %rd43, %rd51;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd12, %rd41, %rd53;
	and.b32  	%r532, %r506, 32;
	or.b32  	%r533, %r358, %r45;
	or.b32  	%r534, %r533, %r532;
	or.b32  	%r59, %r534, %r524;
	mov.u32 	%r351, 0;
	setp.gt.u32 	%p6, %r3, 15;
	mov.u32 	%r1353, %r351;
LBB0_7:                                 // %L2387
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	add.s32 	%r61, %r1353, %r45;
	mov.u32 	%r1354, %r351;
	mov.u32 	%r1355, %r351;
	mov.u32 	%r1356, %r351;
	mov.u32 	%r1357, %r351;
	mov.u32 	%r1358, %r351;
	mov.u32 	%r1359, %r351;
	mov.u32 	%r1360, %r351;
LBB0_8:                                 // %L2390
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2410
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r536, %r1354, %r45;
	or.b32  	%r537, %r536, %r46;
	or.b32  	%r538, %r537, %r7;
	add.s32 	%r539, %r538, %r1353;
	shl.b32 	%r540, %r539, 12;
	and.b32  	%r541, %r540, 134148096;
	or.b32  	%r542, %r47, %r541;
	shl.b32 	%r543, %r542, 2;
	cvt.u64.u32 	%rd54, %r543;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r544, %r545, %r546, %r547}, [%rd55];
	add.s32 	%r548, %r48, %r1354;
	or.b32  	%r549, %r548, %r7;
	add.s32 	%r550, %r549, %r1353;
	shl.b32 	%r551, %r550, 12;
	and.b32  	%r552, %r551, 134213632;
	or.b32  	%r553, %r47, %r552;
	shl.b32 	%r554, %r553, 2;
	cvt.u64.u32 	%rd56, %r554;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.v4.u32 	{%r555, %r556, %r557, %r558}, [%rd57];
	and.b32  	%r559, %r539, 15;
	mul.lo.s32 	%r560, %r559, 129;
	add.s32 	%r561, %r44, %r560;
	mul.wide.u32 	%rd58, %r561, 4;
	add.s64 	%rd60, %rd40, %rd58;
	st.shared.u32 	[%rd60], %r544;
	cvt.u64.u32 	%rd61, %r560;
	cvt.u64.u32 	%rd62, %r44;
	add.s64 	%rd63, %rd62, %rd61;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd65, %rd40, %rd64;
	st.shared.u32 	[%rd65+4], %r545;
	st.shared.u32 	[%rd65+8], %r546;
	st.shared.u32 	[%rd65+12], %r547;
	and.b32  	%r562, %r550, 31;
	mul.lo.s32 	%r563, %r562, 129;
	add.s32 	%r564, %r44, %r563;
	mul.wide.u32 	%rd66, %r564, 4;
	add.s64 	%rd67, %rd40, %rd66;
	st.shared.u32 	[%rd67], %r555;
	cvt.u64.u32 	%rd68, %r563;
	add.s64 	%rd69, %rd62, %rd68;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd40, %rd70;
	st.shared.u32 	[%rd71+4], %r556;
	st.shared.u32 	[%rd71+8], %r557;
	st.shared.u32 	[%rd71+12], %r558;
LBB0_10:                                // %L4288
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r578, 0;
	mov.u32 	%r1361, %r578;
LBB0_11:                                // %L4290
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1090, %r1354, %r1361;
	or.b32  	%r1091, %r1090, %r11;
	add.s32 	%r1092, %r61, %r1091;
	shr.s32 	%r1093, %r1092, 31;
	shr.u32 	%r1094, %r1093, 27;
	add.s32 	%r1095, %r1092, %r1094;
	and.b32  	%r1096, %r1095, -32;
	sub.s32 	%r1097, %r1092, %r1096;
	mad.lo.s32 	%r1098, %r1097, 129, %r49;
	mul.wide.s32 	%rd72, %r1098, 4;
	add.s64 	%rd74, %rd40, %rd72;
	ld.shared.u32 	%r567, [%rd74];
	mov.u32 	%r568, 134744072;
	mov.u32 	%r569, 252645135;
	// begin inline asm
	lop3.b32 %r566, %r567, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1099, %r566, 2021161080;
	xor.b32  	%r577, %r1099, -2139062144;
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r570, %r571, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1100, %r570, 2021161080;
	xor.b32  	%r583, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r576}, {%r577}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r582}, {%r583}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r576}, {%r583}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r582}, {%r577}, {%r586, %r587};
	// end inline asm
	ld.shared.u32 	%r599, [%rd74+4];
	// begin inline asm
	lop3.b32 %r598, %r599, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1101, %r598, 2021161080;
	xor.b32  	%r609, %r1101, -2139062144;
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r602, %r603, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1102, %r602, 2021161080;
	xor.b32  	%r615, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r608}, {%r609}, {%r574, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r614}, {%r615}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r608}, {%r615}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r614}, {%r609}, {%r618, %r619};
	// end inline asm
	ld.shared.u32 	%r631, [%rd74+8];
	// begin inline asm
	lop3.b32 %r630, %r631, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1103, %r630, 2021161080;
	xor.b32  	%r641, %r1103, -2139062144;
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r634, %r635, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1104, %r634, 2021161080;
	xor.b32  	%r647, %r1104, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r640}, {%r641}, {%r606, %r607};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r646}, {%r647}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r640}, {%r647}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r646}, {%r641}, {%r650, %r651};
	// end inline asm
	ld.shared.u32 	%r663, [%rd74+12];
	// begin inline asm
	lop3.b32 %r662, %r663, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1105, %r662, 2021161080;
	xor.b32  	%r673, %r1105, -2139062144;
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r666, %r667, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1106, %r666, 2021161080;
	xor.b32  	%r679, %r1106, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r672}, {%r673}, {%r638, %r639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r676, %r677}, {%r678}, {%r679}, {%r644, %r645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r672}, {%r679}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r678}, {%r673}, {%r682, %r683};
	// end inline asm
	ld.shared.u32 	%r695, [%rd74+16];
	// begin inline asm
	lop3.b32 %r694, %r695, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1107, %r694, 2021161080;
	xor.b32  	%r705, %r1107, -2139062144;
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r698, %r699, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1108, %r698, 2021161080;
	xor.b32  	%r711, %r1108, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r702, %r703}, {%r704}, {%r705}, {%r670, %r671};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r708, %r709}, {%r710}, {%r711}, {%r676, %r677};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r704}, {%r711}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r710}, {%r705}, {%r714, %r715};
	// end inline asm
	ld.shared.u32 	%r727, [%rd74+20];
	// begin inline asm
	lop3.b32 %r726, %r727, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1109, %r726, 2021161080;
	xor.b32  	%r737, %r1109, -2139062144;
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r730, %r731, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1110, %r730, 2021161080;
	xor.b32  	%r743, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r734, %r735}, {%r736}, {%r737}, {%r702, %r703};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r740, %r741}, {%r742}, {%r743}, {%r708, %r709};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r736}, {%r743}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r742}, {%r737}, {%r746, %r747};
	// end inline asm
	ld.shared.u32 	%r759, [%rd74+24];
	// begin inline asm
	lop3.b32 %r758, %r759, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1111, %r758, 2021161080;
	xor.b32  	%r769, %r1111, -2139062144;
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r762, %r763, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1112, %r762, 2021161080;
	xor.b32  	%r775, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r766, %r767}, {%r768}, {%r769}, {%r734, %r735};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r772, %r773}, {%r774}, {%r775}, {%r740, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r778, %r779}, {%r768}, {%r775}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r774}, {%r769}, {%r778, %r779};
	// end inline asm
	ld.shared.u32 	%r791, [%rd74+28];
	// begin inline asm
	lop3.b32 %r790, %r791, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1113, %r790, 2021161080;
	xor.b32  	%r801, %r1113, -2139062144;
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r794, %r795, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1114, %r794, 2021161080;
	xor.b32  	%r807, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r798, %r799}, {%r800}, {%r801}, {%r766, %r767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r804, %r805}, {%r806}, {%r807}, {%r772, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r810, %r811}, {%r800}, {%r807}, {%r784, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r806}, {%r801}, {%r810, %r811};
	// end inline asm
	sub.s32 	%r1115, %r798, %r804;
	add.s32 	%r1116, %r1115, 4;
	shr.s32 	%r824, %r1116, 3;
	add.s32 	%r1117, %r816, 4;
	shr.s32 	%r823, %r1117, 3;
	sub.s32 	%r1118, %r799, %r805;
	add.s32 	%r1119, %r1118, 4;
	shr.s32 	%r827, %r1119, 3;
	add.s32 	%r1120, %r817, 4;
	shr.s32 	%r826, %r1120, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r822, %r823, %r824;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r825, %r826, %r827;
	// end inline asm
	or.b32  	%r1121, %r50, %r1361;
	mul.lo.s32 	%r1122, %r1121, 100;
	add.s32 	%r1123, %r51, %r1122;
	mul.wide.u32 	%rd75, %r1123, 4;
	add.s64 	%rd77, %rd41, %rd75;
	st.shared.u32 	[%rd77], %r822;
	add.s32 	%r1124, %r1122, 100;
	add.s32 	%r1125, %r51, %r1124;
	mul.wide.u32 	%rd78, %r1125, 4;
	add.s64 	%rd79, %rd41, %rd78;
	st.shared.u32 	[%rd79], %r825;
	ld.shared.u32 	%r829, [%rd74];
	// begin inline asm
	lop3.b32 %r828, %r829, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1126, %r828, 2021161080;
	xor.b32  	%r839, %r1126, -2139062144;
	shr.u32 	%r833, %r829, 4;
	// begin inline asm
	lop3.b32 %r832, %r833, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1127, %r832, 2021161080;
	xor.b32  	%r845, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r836, %r837}, {%r838}, {%r839}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r842, %r843}, {%r844}, {%r845}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r838}, {%r845}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r844}, {%r839}, {%r848, %r849};
	// end inline asm
	ld.shared.u32 	%r861, [%rd74+4];
	// begin inline asm
	lop3.b32 %r860, %r861, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1128, %r860, 2021161080;
	xor.b32  	%r871, %r1128, -2139062144;
	shr.u32 	%r865, %r861, 4;
	// begin inline asm
	lop3.b32 %r864, %r865, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1129, %r864, 2021161080;
	xor.b32  	%r877, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r868, %r869}, {%r870}, {%r871}, {%r836, %r837};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r874, %r875}, {%r876}, {%r877}, {%r842, %r843};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r870}, {%r877}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r876}, {%r871}, {%r880, %r881};
	// end inline asm
	ld.shared.u32 	%r893, [%rd74+8];
	// begin inline asm
	lop3.b32 %r892, %r893, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1130, %r892, 2021161080;
	xor.b32  	%r903, %r1130, -2139062144;
	shr.u32 	%r897, %r893, 4;
	// begin inline asm
	lop3.b32 %r896, %r897, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1131, %r896, 2021161080;
	xor.b32  	%r909, %r1131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r900, %r901}, {%r902}, {%r903}, {%r868, %r869};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r906, %r907}, {%r908}, {%r909}, {%r874, %r875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r902}, {%r909}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r908}, {%r903}, {%r912, %r913};
	// end inline asm
	ld.shared.u32 	%r925, [%rd74+12];
	// begin inline asm
	lop3.b32 %r924, %r925, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1132, %r924, 2021161080;
	xor.b32  	%r935, %r1132, -2139062144;
	shr.u32 	%r929, %r925, 4;
	// begin inline asm
	lop3.b32 %r928, %r929, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1133, %r928, 2021161080;
	xor.b32  	%r941, %r1133, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r932, %r933}, {%r934}, {%r935}, {%r900, %r901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r938, %r939}, {%r940}, {%r941}, {%r906, %r907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r934}, {%r941}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r940}, {%r935}, {%r944, %r945};
	// end inline asm
	ld.shared.u32 	%r957, [%rd74+16];
	// begin inline asm
	lop3.b32 %r956, %r957, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1134, %r956, 2021161080;
	xor.b32  	%r967, %r1134, -2139062144;
	shr.u32 	%r961, %r957, 4;
	// begin inline asm
	lop3.b32 %r960, %r961, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1135, %r960, 2021161080;
	xor.b32  	%r973, %r1135, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r964, %r965}, {%r966}, {%r967}, {%r932, %r933};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r970, %r971}, {%r972}, {%r973}, {%r938, %r939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r966}, {%r973}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r972}, {%r967}, {%r976, %r977};
	// end inline asm
	ld.shared.u32 	%r989, [%rd74+20];
	// begin inline asm
	lop3.b32 %r988, %r989, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1136, %r988, 2021161080;
	xor.b32  	%r999, %r1136, -2139062144;
	shr.u32 	%r993, %r989, 4;
	// begin inline asm
	lop3.b32 %r992, %r993, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1137, %r992, 2021161080;
	xor.b32  	%r1005, %r1137, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r996, %r997}, {%r998}, {%r999}, {%r964, %r965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1002, %r1003}, {%r1004}, {%r1005}, {%r970, %r971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r998}, {%r1005}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r1004}, {%r999}, {%r1008, %r1009};
	// end inline asm
	ld.shared.u32 	%r1021, [%rd74+24];
	// begin inline asm
	lop3.b32 %r1020, %r1021, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1138, %r1020, 2021161080;
	xor.b32  	%r1031, %r1138, -2139062144;
	shr.u32 	%r1025, %r1021, 4;
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1139, %r1024, 2021161080;
	xor.b32  	%r1037, %r1139, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1028, %r1029}, {%r1030}, {%r1031}, {%r996, %r997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1034, %r1035}, {%r1036}, {%r1037}, {%r1002, %r1003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1040, %r1041}, {%r1030}, {%r1037}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r1036}, {%r1031}, {%r1040, %r1041};
	// end inline asm
	ld.shared.u32 	%r1053, [%rd74+28];
	// begin inline asm
	lop3.b32 %r1052, %r1053, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1140, %r1052, 2021161080;
	xor.b32  	%r1063, %r1140, -2139062144;
	shr.u32 	%r1057, %r1053, 4;
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1141, %r1056, 2021161080;
	xor.b32  	%r1069, %r1141, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1060, %r1061}, {%r1062}, {%r1063}, {%r1028, %r1029};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1066, %r1067}, {%r1068}, {%r1069}, {%r1034, %r1035};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1072, %r1073}, {%r1062}, {%r1069}, {%r1046, %r1047};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1078, %r1079}, {%r1068}, {%r1063}, {%r1072, %r1073};
	// end inline asm
	sub.s32 	%r1142, %r1060, %r1066;
	add.s32 	%r1143, %r1142, 4;
	shr.s32 	%r1086, %r1143, 3;
	add.s32 	%r1144, %r1078, 4;
	shr.s32 	%r1085, %r1144, 3;
	sub.s32 	%r1145, %r1061, %r1067;
	add.s32 	%r1146, %r1145, 4;
	shr.s32 	%r1089, %r1146, 3;
	add.s32 	%r1147, %r1079, 4;
	shr.s32 	%r1088, %r1147, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1084, %r1085, %r1086;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1087, %r1088, %r1089;
	// end inline asm
	add.s32 	%r1148, %r52, %r1122;
	mul.wide.u32 	%rd80, %r1148, 4;
	add.s64 	%rd81, %rd41, %rd80;
	st.shared.u32 	[%rd81], %r1084;
	add.s32 	%r1149, %r52, %r1124;
	mul.wide.u32 	%rd82, %r1149, 4;
	add.s64 	%rd83, %rd41, %rd82;
	st.shared.u32 	[%rd83], %r1087;
	add.s32 	%r1361, %r1361, 8;
	setp.ne.s32 	%p7, %r1361, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8469
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1168, [%rd7];
	ld.shared.u32 	%r1169, [%rd8+12800];
	ld.shared.u32 	%r1170, [%rd8+25600];
	ld.shared.u32 	%r1171, [%rd8+38400];
	ld.shared.u32 	%r1172, [%rd9];
	ld.shared.u32 	%r1173, [%rd10+12800];
	ld.shared.u32 	%r1174, [%rd10+25600];
	ld.shared.u32 	%r1175, [%rd10+38400];
	ld.shared.u32 	%r1176, [%rd11];
	ld.shared.u32 	%r1177, [%rd12+12800];
	ld.shared.u32 	%r1178, [%rd12+25600];
	ld.shared.u32 	%r1179, [%rd12+38400];
	or.b32  	%r1180, %r1, %r1354;
	or.b32  	%r1181, %r1180, 24;
	add.s32 	%r1182, %r61, %r1181;
	shr.s32 	%r1183, %r1182, 31;
	shr.u32 	%r1184, %r1183, 27;
	add.s32 	%r1185, %r1182, %r1184;
	and.b32  	%r1186, %r1185, -32;
	sub.s32 	%r1187, %r1182, %r1186;
	mul.lo.s32 	%r1188, %r1187, 100;
	add.s32 	%r1189, %r1188, %r8;
	mul.wide.s32 	%rd84, %r1189, 4;
	add.s64 	%rd87, %rd41, %rd84;
	ld.shared.u32 	%r1190, [%rd87];
	add.s32 	%r1191, %r53, %r1188;
	mul.wide.u32 	%rd88, %r1191, 4;
	add.s64 	%rd89, %rd41, %rd88;
	ld.shared.u32 	%r1192, [%rd89];
	add.s32 	%r1193, %r54, %r1188;
	mul.wide.u32 	%rd90, %r1193, 4;
	add.s64 	%rd91, %rd41, %rd90;
	ld.shared.u32 	%r1194, [%rd91];
	add.s32 	%r1195, %r55, %r1188;
	mul.wide.u32 	%rd92, %r1195, 4;
	add.s64 	%rd93, %rd41, %rd92;
	ld.shared.u32 	%r1196, [%rd93];
	cvt.s32.s16 	%r1197, %r1168;
	shr.s32 	%r1198, %r1168, 16;
	cvt.s32.s16 	%r1199, %r1169;
	shr.s32 	%r1200, %r1169, 16;
	cvt.s32.s16 	%r1201, %r1170;
	shr.s32 	%r1202, %r1170, 16;
	cvt.s32.s16 	%r1203, %r1171;
	shr.s32 	%r1204, %r1171, 16;
	cvt.s32.s16 	%r1205, %r1172;
	shr.s32 	%r1206, %r1172, 16;
	cvt.s32.s16 	%r1207, %r1173;
	shr.s32 	%r1208, %r1173, 16;
	cvt.s32.s16 	%r1209, %r1174;
	shr.s32 	%r1210, %r1174, 16;
	cvt.s32.s16 	%r1211, %r1175;
	shr.s32 	%r1212, %r1175, 16;
	cvt.s32.s16 	%r1213, %r1176;
	shr.s32 	%r1214, %r1176, 16;
	cvt.s32.s16 	%r1215, %r1177;
	shr.s32 	%r1216, %r1177, 16;
	cvt.s32.s16 	%r1217, %r1178;
	shr.s32 	%r1218, %r1178, 16;
	cvt.s32.s16 	%r1219, %r1179;
	shr.s32 	%r1220, %r1179, 16;
	cvt.s32.s16 	%r1221, %r1190;
	shr.s32 	%r1222, %r1190, 16;
	cvt.s32.s16 	%r1223, %r1192;
	shr.s32 	%r1224, %r1192, 16;
	cvt.s32.s16 	%r1225, %r1194;
	shr.s32 	%r1226, %r1194, 16;
	cvt.s32.s16 	%r1227, %r1196;
	shr.s32 	%r1228, %r1196, 16;
	add.s32 	%r1229, %r1197, %r56;
	add.s32 	%r1230, %r1229, %r1199;
	add.s32 	%r1231, %r1230, %r1201;
	add.s32 	%r1232, %r1231, %r1203;
	shr.s32 	%r1233, %r1232, %r57;
	add.s32 	%r1234, %r1198, %r56;
	add.s32 	%r1235, %r1234, %r1200;
	add.s32 	%r1236, %r1235, %r1202;
	add.s32 	%r1237, %r1236, %r1204;
	shr.s32 	%r1238, %r1237, %r57;
	add.s32 	%r1239, %r1205, %r56;
	add.s32 	%r1240, %r1239, %r1207;
	add.s32 	%r1241, %r1240, %r1209;
	add.s32 	%r1242, %r1241, %r1211;
	shr.s32 	%r1243, %r1242, %r57;
	add.s32 	%r1244, %r1206, %r56;
	add.s32 	%r1245, %r1244, %r1208;
	add.s32 	%r1246, %r1245, %r1210;
	add.s32 	%r1247, %r1246, %r1212;
	shr.s32 	%r1248, %r1247, %r57;
	add.s32 	%r1249, %r1213, %r56;
	add.s32 	%r1250, %r1249, %r1215;
	add.s32 	%r1251, %r1250, %r1217;
	add.s32 	%r1252, %r1251, %r1219;
	shr.s32 	%r1253, %r1252, %r57;
	add.s32 	%r1254, %r1214, %r56;
	add.s32 	%r1255, %r1254, %r1216;
	add.s32 	%r1256, %r1255, %r1218;
	add.s32 	%r1257, %r1256, %r1220;
	shr.s32 	%r1258, %r1257, %r57;
	add.s32 	%r1259, %r1221, %r56;
	add.s32 	%r1260, %r1259, %r1223;
	add.s32 	%r1261, %r1260, %r1225;
	add.s32 	%r1262, %r1261, %r1227;
	shr.s32 	%r1263, %r1262, %r57;
	add.s32 	%r1264, %r1222, %r56;
	add.s32 	%r1265, %r1264, %r1224;
	add.s32 	%r1266, %r1265, %r1226;
	add.s32 	%r1267, %r1266, %r1228;
	shr.s32 	%r1268, %r1267, %r57;
	max.s32 	%r1269, %r1233, -7;
	min.s32 	%r1155, %r1269, 7;
	max.s32 	%r1270, %r1238, -7;
	min.s32 	%r1162, %r1270, 7;
	max.s32 	%r1271, %r1243, -7;
	min.s32 	%r1154, %r1271, 7;
	max.s32 	%r1272, %r1248, -7;
	min.s32 	%r1161, %r1272, 7;
	max.s32 	%r1273, %r1253, -7;
	min.s32 	%r1152, %r1273, 7;
	max.s32 	%r1274, %r1258, -7;
	min.s32 	%r1159, %r1274, 7;
	max.s32 	%r1275, %r1263, -7;
	min.s32 	%r1151, %r1275, 7;
	max.s32 	%r1276, %r1268, -7;
	min.s32 	%r1158, %r1276, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1150, %r1151, %r1152, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1153, %r1154, %r1155, %r1150;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1157, %r1158, %r1159, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1160, %r1161, %r1162, %r1157;
	// end inline asm
	shl.b32 	%r1167, %r1160, 4;
	// begin inline asm
	lop3.b32 %r1287, %r569, %r1153, %r1167, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1354, 0;
	selp.b32 	%r1359, %r1287, %r1359, %p8;
	selp.b32 	%r1360, %r1287, %r1360, %p8;
	setp.eq.s32 	%p9, %r1354, 32;
	selp.b32 	%r1355, %r1287, %r1355, %p9;
	selp.b32 	%r1356, %r1287, %r1356, %p9;
	setp.eq.s32 	%p10, %r1354, 64;
	selp.b32 	%r1357, %r1287, %r1357, %p10;
	selp.b32 	%r1358, %r1287, %r1358, %p10;
	add.s32 	%r78, %r1354, 32;
	setp.ne.s32 	%p11, %r1354, 96;
	mov.u32 	%r1354, %r78;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11221
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1277, %r1359, %r1355, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1360, %r1356, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1357, %r1287, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1358, %r1287, %r230;
	// end inline asm
	selp.b32 	%r1325, %r1281, %r1277, %p12;
	shfl.sync.bfly.b32	%r1326, %r1325, 1, 31, -1;
	selp.b32 	%r1294, %r1277, %r1326, %p12;
	selp.b32 	%r1295, %r1326, %r1281, %p12;
	selp.b32 	%r1327, %r1289, %r1285, %p12;
	shfl.sync.bfly.b32	%r1328, %r1327, 1, 31, -1;
	selp.b32 	%r1302, %r1285, %r1328, %p12;
	selp.b32 	%r1303, %r1328, %r1289, %p12;
	// begin inline asm
	prmt.b32 %r1293, %r1294, %r1295, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1297, %r1294, %r1295, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1301, %r1302, %r1303, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1305, %r1302, %r1303, %r230;
	// end inline asm
	selp.b32 	%r1329, %r1301, %r1293, %p4;
	shfl.sync.bfly.b32	%r1330, %r1329, 2, 31, -1;
	selp.b32 	%r1310, %r1293, %r1330, %p4;
	selp.b32 	%r1311, %r1330, %r1301, %p4;
	selp.b32 	%r1331, %r1305, %r1297, %p4;
	shfl.sync.bfly.b32	%r1332, %r1331, 2, 31, -1;
	selp.b32 	%r1318, %r1297, %r1332, %p4;
	selp.b32 	%r1319, %r1332, %r1305, %p4;
	// begin inline asm
	prmt.b32 %r1309, %r1310, %r1311, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1313, %r1310, %r1311, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1317, %r1318, %r1319, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1321, %r1318, %r1319, %r102;
	// end inline asm
	selp.b32 	%r1333, %r1317, %r1309, %p5;
	shfl.sync.bfly.b32	%r1334, %r1333, 4, 31, -1;
	selp.b32 	%r1335, %r1309, %r1334, %p5;
	selp.b32 	%r1336, %r1334, %r1317, %p5;
	selp.b32 	%r1337, %r1321, %r1313, %p5;
	shfl.sync.bfly.b32	%r1338, %r1337, 4, 31, -1;
	selp.b32 	%r1339, %r1313, %r1338, %p5;
	selp.b32 	%r1340, %r1338, %r1321, %p5;
	selp.b32 	%r1341, %r1339, %r1335, %p12;
	shfl.sync.bfly.b32	%r1342, %r1341, 1, 31, -1;
	selp.b32 	%r1343, %r1335, %r1342, %p12;
	selp.b32 	%r1344, %r1342, %r1339, %p12;
	selp.b32 	%r1345, %r1340, %r1336, %p12;
	shfl.sync.bfly.b32	%r1346, %r1345, 1, 31, -1;
	selp.b32 	%r1347, %r1336, %r1346, %p12;
	selp.b32 	%r1348, %r1346, %r1340, %p12;
	add.s32 	%r1349, %r59, %r1353;
	shr.u32 	%r1350, %r1349, 2;
	add.s32 	%r1351, %r58, %r1350;
	mul.wide.u32 	%rd94, %r1351, 4;
	add.s64 	%rd95, %rd4, %rd94;
	st.global.v4.u32 	[%rd95], {%r1343, %r1347, %r1344, %r1348};
	add.s32 	%r79, %r1353, 128;
	setp.ne.s32 	%p15, %r1353, 1920;
	mov.u32 	%r1353, %r79;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11624
	mov.u32 	%r1352, 0;
	st.global.u32 	[%rd6], %r1352;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd14, exception1;
	cvta.global.u64 	%rd15, %rd14;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r94, 2;
	st.global.u32 	[%rd6], %r94;
	mov.u64 	%rd21, exception925;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
